
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000026f  00000000  00000000  00000131  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f6  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000016f  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cb  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  000006f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  0000073b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#define F_CPU 16000000UL

int main(void)
{
	DDRA=0X0F;
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	8a bb       	out	0x1a, r24	; 26
	
	while(1)
	{
		
			PORTA=0X01;
  70:	71 e0       	ldi	r23, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  72:	20 e4       	ldi	r18, 0x40	; 64
  74:	3f e1       	ldi	r19, 0x1F	; 31
			_delay_us(2000);
			
			PORTA=0X02;
  76:	62 e0       	ldi	r22, 0x02	; 2
			_delay_us(2000);
			
			PORTA=0X04;
  78:	54 e0       	ldi	r21, 0x04	; 4
			_delay_us(2000);
			
			PORTA=0X08;
  7a:	48 e0       	ldi	r20, 0x08	; 8
	DDRA=0X0F;
	
	while(1)
	{
		
			PORTA=0X01;
  7c:	7b bb       	out	0x1b, r23	; 27
  7e:	c9 01       	movw	r24, r18
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <main+0x14>
			_delay_us(2000);
			
			PORTA=0X02;
  84:	6b bb       	out	0x1b, r22	; 27
  86:	c9 01       	movw	r24, r18
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0x1c>
			_delay_us(2000);
			
			PORTA=0X04;
  8c:	5b bb       	out	0x1b, r21	; 27
  8e:	c9 01       	movw	r24, r18
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
			_delay_us(2000);
			
			PORTA=0X08;
  94:	4b bb       	out	0x1b, r20	; 27
  96:	c9 01       	movw	r24, r18
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
  9c:	ef cf       	rjmp	.-34     	; 0x7c <main+0x10>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
