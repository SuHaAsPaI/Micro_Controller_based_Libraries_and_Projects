
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000020  00800060  00800060  00000a18  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000073  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000405  00000000  00000000  00000aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000169  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000496  00000000  00000000  00001019  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d9  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000258  00000000  00000000  000015c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000058  00000000  00000000  00001821  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 38       	cpi	r26, 0x80	; 128
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  74:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <config>:
unsigned int k1,k2,k;


void config()
{
cli();
  7c:	f8 94       	cli

//ADC pin configuration
 DDRA = 0x00;  //set PORTA direction as input
  7e:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00; //set PORTA pins floating
  80:	1b ba       	out	0x1b, r1	; 27
 DDRC=0x0F;
  82:	8f e0       	ldi	r24, 0x0F	; 15
  84:	84 bb       	out	0x14, r24	; 20
 DDRB=0X0F;
  86:	87 bb       	out	0x17, r24	; 23
 TCCR1A=0xA1;
  88:	81 ea       	ldi	r24, 0xA1	; 161
  8a:	8f bd       	out	0x2f, r24	; 47
 TCCR1B=0x05;
  8c:	85 e0       	ldi	r24, 0x05	; 5
  8e:	8e bd       	out	0x2e, r24	; 46
 OCR1A=180;				//Left Motor PWM
  90:	84 eb       	ldi	r24, 0xB4	; 180
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	9b bd       	out	0x2b, r25	; 43
  96:	8a bd       	out	0x2a, r24	; 42
 OCR1B=180;				//Right Motor PWM	
  98:	99 bd       	out	0x29, r25	; 41
  9a:	88 bd       	out	0x28, r24	; 40
 DDRD=0x30;				//Declaring PD4,PD5 as output
  9c:	80 e3       	ldi	r24, 0x30	; 48
  9e:	81 bb       	out	0x11, r24	; 17
  

//Function to Initialize ADC
 ADCSRA = 0x00;
  a0:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80;
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
  aa:	86 e8       	ldi	r24, 0x86	; 134
  ac:	86 b9       	out	0x06, r24	; 6

sei();
  ae:	78 94       	sei

}
  b0:	08 95       	ret

000000b2 <ADC_Conversion>:
//This Function accepts the Channel Number and returns the corresponding Analog Value
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;
 ADMUX= 0x20| Ch;
  b2:	87 70       	andi	r24, 0x07	; 7
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
  b8:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
  ba:	34 9b       	sbis	0x06, 4	; 6
  bc:	fe cf       	rjmp	.-4      	; 0xba <ADC_Conversion+0x8>
 a=ADCH;
  be:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;          //clear ADIF (ADC Interrupt Flag) by writing 1 to it
  c0:	34 9a       	sbi	0x06, 4	; 6
 return a;
}
  c2:	08 95       	ret

000000c4 <main>:


int main(void)
{
  c4:	5f 92       	push	r5
  c6:	6f 92       	push	r6
  c8:	7f 92       	push	r7
  ca:	8f 92       	push	r8
  cc:	9f 92       	push	r9
  ce:	af 92       	push	r10
  d0:	bf 92       	push	r11
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
config();
  e2:	0e 94 3e 00 	call	0x7c	; 0x7c <config>

unsigned int a,ma,mb,m1,m2,m3,m4,x,y;


   PORTC=0x0F;
  e6:	8f e0       	ldi	r24, 0x0F	; 15
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	80 e5       	ldi	r24, 0x50	; 80
  ec:	93 ec       	ldi	r25, 0xC3	; 195
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ee:	20 e9       	ldi	r18, 0x90	; 144
  f0:	31 e0       	ldi	r19, 0x01	; 1
  f2:	f9 01       	movw	r30, r18
  f4:	31 97       	sbiw	r30, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fa:	d9 f7       	brne	.-10     	; 0xf2 <main+0x2e>
   _delay_ms(5000);
   PORTC=0x00;
  fc:	15 ba       	out	0x15, r1	; 21
  fe:	80 e1       	ldi	r24, 0x10	; 16
 100:	97 e2       	ldi	r25, 0x27	; 39
 102:	20 e9       	ldi	r18, 0x90	; 144
 104:	31 e0       	ldi	r19, 0x01	; 1
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 10e:	d9 f7       	brne	.-10     	; 0x106 <main+0x42>
    _delay_ms(1000);
 
   // For white line readings
   
   str[0]= ADC_Conversion(0);
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 116:	05 e6       	ldi	r16, 0x65	; 101
 118:	10 e0       	ldi	r17, 0x00	; 0
 11a:	80 93 65 00 	sts	0x0065, r24
 11e:	10 92 66 00 	sts	0x0066, r1
   str[1]= ADC_Conversion(1);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 128:	80 93 67 00 	sts	0x0067, r24
 12c:	f8 01       	movw	r30, r16
 12e:	13 82       	std	Z+3, r1	; 0x03
   str[2]= ADC_Conversion(2);
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 136:	80 93 69 00 	sts	0x0069, r24
 13a:	f8 01       	movw	r30, r16
 13c:	15 82       	std	Z+5, r1	; 0x05
   str[3]= ADC_Conversion(3);
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 144:	80 93 6b 00 	sts	0x006B, r24
 148:	f8 01       	movw	r30, r16
 14a:	17 82       	std	Z+7, r1	; 0x07
   str[4]= ADC_Conversion(4);
 14c:	84 e0       	ldi	r24, 0x04	; 4
 14e:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 152:	80 93 6d 00 	sts	0x006D, r24
 156:	f8 01       	movw	r30, r16
 158:	11 86       	std	Z+9, r1	; 0x09
   str[5]= ADC_Conversion(5);
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 160:	80 93 6f 00 	sts	0x006F, r24
 164:	f8 01       	movw	r30, r16
 166:	13 86       	std	Z+11, r1	; 0x0b
   
   PORTC=0x0F;
 168:	8f e0       	ldi	r24, 0x0F	; 15
 16a:	85 bb       	out	0x15, r24	; 21
 16c:	80 e5       	ldi	r24, 0x50	; 80
 16e:	93 ec       	ldi	r25, 0xC3	; 195
 170:	20 e9       	ldi	r18, 0x90	; 144
 172:	31 e0       	ldi	r19, 0x01	; 1
 174:	f9 01       	movw	r30, r18
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17c:	d9 f7       	brne	.-10     	; 0x174 <main+0xb0>
   _delay_ms(5000);
   PORTC=0x00;
 17e:	15 ba       	out	0x15, r1	; 21
   
   // For Black line readings
   
   str[6]=  ADC_Conversion(0);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 186:	01 e7       	ldi	r16, 0x71	; 113
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	80 93 71 00 	sts	0x0071, r24
 18e:	10 92 72 00 	sts	0x0072, r1
   str[7]=  ADC_Conversion(1);
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 198:	80 93 73 00 	sts	0x0073, r24
 19c:	f8 01       	movw	r30, r16
 19e:	13 82       	std	Z+3, r1	; 0x03
   str[8]=  ADC_Conversion(2);
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 1a6:	80 93 75 00 	sts	0x0075, r24
 1aa:	f8 01       	movw	r30, r16
 1ac:	15 82       	std	Z+5, r1	; 0x05
   str[9]=  ADC_Conversion(3);
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 1b4:	80 93 77 00 	sts	0x0077, r24
 1b8:	f8 01       	movw	r30, r16
 1ba:	17 82       	std	Z+7, r1	; 0x07
   str[10]= ADC_Conversion(4);
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 1c2:	80 93 79 00 	sts	0x0079, r24
 1c6:	f8 01       	movw	r30, r16
 1c8:	11 86       	std	Z+9, r1	; 0x09
   str[11]= ADC_Conversion(5);
 1ca:	85 e0       	ldi	r24, 0x05	; 5
 1cc:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 1d0:	08 2f       	mov	r16, r24
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	10 93 7c 00 	sts	0x007C, r17
 1d8:	00 93 7b 00 	sts	0x007B, r16

   
   
   k1=((str[0]+str[1]+str[2]+str[3]+str[4]+str[5])/6);   // Taking average for white line
 1dc:	80 91 67 00 	lds	r24, 0x0067
 1e0:	90 91 68 00 	lds	r25, 0x0068
 1e4:	20 91 65 00 	lds	r18, 0x0065
 1e8:	30 91 66 00 	lds	r19, 0x0066
 1ec:	82 0f       	add	r24, r18
 1ee:	93 1f       	adc	r25, r19
 1f0:	20 91 69 00 	lds	r18, 0x0069
 1f4:	30 91 6a 00 	lds	r19, 0x006A
 1f8:	82 0f       	add	r24, r18
 1fa:	93 1f       	adc	r25, r19
 1fc:	20 91 6b 00 	lds	r18, 0x006B
 200:	30 91 6c 00 	lds	r19, 0x006C
 204:	82 0f       	add	r24, r18
 206:	93 1f       	adc	r25, r19
 208:	20 91 6d 00 	lds	r18, 0x006D
 20c:	30 91 6e 00 	lds	r19, 0x006E
 210:	82 0f       	add	r24, r18
 212:	93 1f       	adc	r25, r19
 214:	20 91 6f 00 	lds	r18, 0x006F
 218:	30 91 70 00 	lds	r19, 0x0070
 21c:	82 0f       	add	r24, r18
 21e:	93 1f       	adc	r25, r19
 220:	66 e0       	ldi	r22, 0x06	; 6
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	0e 94 bc 04 	call	0x978	; 0x978 <__udivmodhi4>
 228:	fb 01       	movw	r30, r22
 22a:	70 93 7e 00 	sts	0x007E, r23
 22e:	60 93 7d 00 	sts	0x007D, r22
   
   k2=((str[6]+str[7]+str[8]+str[9]+str[10]+str[11])/6);  // Taking average for black line
 232:	80 91 73 00 	lds	r24, 0x0073
 236:	90 91 74 00 	lds	r25, 0x0074
 23a:	20 91 71 00 	lds	r18, 0x0071
 23e:	30 91 72 00 	lds	r19, 0x0072
 242:	82 0f       	add	r24, r18
 244:	93 1f       	adc	r25, r19
 246:	20 91 75 00 	lds	r18, 0x0075
 24a:	30 91 76 00 	lds	r19, 0x0076
 24e:	82 0f       	add	r24, r18
 250:	93 1f       	adc	r25, r19
 252:	20 91 77 00 	lds	r18, 0x0077
 256:	30 91 78 00 	lds	r19, 0x0078
 25a:	82 0f       	add	r24, r18
 25c:	93 1f       	adc	r25, r19
 25e:	20 91 79 00 	lds	r18, 0x0079
 262:	30 91 7a 00 	lds	r19, 0x007A
 266:	82 0f       	add	r24, r18
 268:	93 1f       	adc	r25, r19
 26a:	80 0f       	add	r24, r16
 26c:	91 1f       	adc	r25, r17
 26e:	66 e0       	ldi	r22, 0x06	; 6
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	0e 94 bc 04 	call	0x978	; 0x978 <__udivmodhi4>
 276:	70 93 63 00 	sts	0x0063, r23
 27a:	60 93 62 00 	sts	0x0062, r22
   
   k=((k1+k2)/2);        // taking average of both
 27e:	6e 0f       	add	r22, r30
 280:	7f 1f       	adc	r23, r31
 282:	76 95       	lsr	r23
 284:	67 95       	ror	r22
 286:	70 93 61 00 	sts	0x0061, r23
 28a:	60 93 60 00 	sts	0x0060, r22
 28e:	20 e1       	ldi	r18, 0x10	; 16
 290:	37 e2       	ldi	r19, 0x27	; 39
 292:	80 e9       	ldi	r24, 0x90	; 144
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	fc 01       	movw	r30, r24
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <main+0x1d4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a0:	d1 f7       	brne	.-12     	; 0x296 <main+0x1d2>
   

	for(a=0;a<=20;a++)
	{
		PORTC=0x01;
		_delay_ms(k);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 a3 03 	call	0x746	; 0x746 <__floatunsisf>
 2aa:	5b 01       	movw	r10, r22
 2ac:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	4a e7       	ldi	r20, 0x7A	; 122
 2b4:	55 e4       	ldi	r21, 0x45	; 69
 2b6:	0e 94 31 04 	call	0x862	; 0x862 <__mulsf3>
 2ba:	7b 01       	movw	r14, r22
 2bc:	8c 01       	movw	r16, r24
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2be:	0e 94 77 03 	call	0x6ee	; 0x6ee <__fixunssfsi>
 2c2:	3b 01       	movw	r6, r22
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
 2c6:	d0 e0       	ldi	r29, 0x00	; 0
   _delay_ms(1000);
   

	for(a=0;a<=20;a++)
	{
		PORTC=0x01;
 2c8:	55 24       	eor	r5, r5
 2ca:	53 94       	inc	r5
 2cc:	70 e9       	ldi	r23, 0x90	; 144
 2ce:	87 2e       	mov	r8, r23
 2d0:	71 e0       	ldi	r23, 0x01	; 1
 2d2:	97 2e       	mov	r9, r23
 2d4:	55 ba       	out	0x15, r5	; 21
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 2d6:	c8 01       	movw	r24, r16
 2d8:	b7 01       	movw	r22, r14
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	40 e8       	ldi	r20, 0x80	; 128
 2e0:	5f e3       	ldi	r21, 0x3F	; 63
 2e2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__cmpsf2>
 2e6:	87 fd       	sbrc	r24, 7
 2e8:	20 c0       	rjmp	.+64     	; 0x32a <main+0x266>
		__ticks = 1;
	else if (__tmp > 65535)
 2ea:	c8 01       	movw	r24, r16
 2ec:	b7 01       	movw	r22, r14
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	3f ef       	ldi	r19, 0xFF	; 255
 2f2:	4f e7       	ldi	r20, 0x7F	; 127
 2f4:	57 e4       	ldi	r21, 0x47	; 71
 2f6:	0e 94 2d 04 	call	0x85a	; 0x85a <__gesf2>
 2fa:	18 16       	cp	r1, r24
 2fc:	14 f0       	brlt	.+4      	; 0x302 <main+0x23e>
 2fe:	93 01       	movw	r18, r6
 300:	16 c0       	rjmp	.+44     	; 0x32e <main+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 302:	c6 01       	movw	r24, r12
 304:	b5 01       	movw	r22, r10
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	40 e2       	ldi	r20, 0x20	; 32
 30c:	51 e4       	ldi	r21, 0x41	; 65
 30e:	0e 94 31 04 	call	0x862	; 0x862 <__mulsf3>
 312:	0e 94 77 03 	call	0x6ee	; 0x6ee <__fixunssfsi>
 316:	05 c0       	rjmp	.+10     	; 0x322 <main+0x25e>
 318:	c4 01       	movw	r24, r8
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <main+0x256>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 31e:	61 50       	subi	r22, 0x01	; 1
 320:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 322:	61 15       	cp	r22, r1
 324:	71 05       	cpc	r23, r1
 326:	c1 f7       	brne	.-16     	; 0x318 <main+0x254>
 328:	05 c0       	rjmp	.+10     	; 0x334 <main+0x270>
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	c9 01       	movw	r24, r18
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0x26c>
		_delay_ms(k);
		PORTC=0x00;
 334:	15 ba       	out	0x15, r1	; 21
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 336:	c8 01       	movw	r24, r16
 338:	b7 01       	movw	r22, r14
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	40 e8       	ldi	r20, 0x80	; 128
 340:	5f e3       	ldi	r21, 0x3F	; 63
 342:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__cmpsf2>
 346:	87 fd       	sbrc	r24, 7
 348:	20 c0       	rjmp	.+64     	; 0x38a <main+0x2c6>
		__ticks = 1;
	else if (__tmp > 65535)
 34a:	c8 01       	movw	r24, r16
 34c:	b7 01       	movw	r22, r14
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	3f ef       	ldi	r19, 0xFF	; 255
 352:	4f e7       	ldi	r20, 0x7F	; 127
 354:	57 e4       	ldi	r21, 0x47	; 71
 356:	0e 94 2d 04 	call	0x85a	; 0x85a <__gesf2>
 35a:	18 16       	cp	r1, r24
 35c:	14 f0       	brlt	.+4      	; 0x362 <main+0x29e>
 35e:	93 01       	movw	r18, r6
 360:	16 c0       	rjmp	.+44     	; 0x38e <main+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 362:	c6 01       	movw	r24, r12
 364:	b5 01       	movw	r22, r10
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	40 e2       	ldi	r20, 0x20	; 32
 36c:	51 e4       	ldi	r21, 0x41	; 65
 36e:	0e 94 31 04 	call	0x862	; 0x862 <__mulsf3>
 372:	0e 94 77 03 	call	0x6ee	; 0x6ee <__fixunssfsi>
 376:	05 c0       	rjmp	.+10     	; 0x382 <main+0x2be>
 378:	c4 01       	movw	r24, r8
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <main+0x2b6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 37e:	61 50       	subi	r22, 0x01	; 1
 380:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 382:	61 15       	cp	r22, r1
 384:	71 05       	cpc	r23, r1
 386:	c1 f7       	brne	.-16     	; 0x378 <main+0x2b4>
 388:	05 c0       	rjmp	.+10     	; 0x394 <main+0x2d0>
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	c9 01       	movw	r24, r18
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <main+0x2cc>
   k=((k1+k2)/2);        // taking average of both
   
   _delay_ms(1000);
   

	for(a=0;a<=20;a++)
 394:	21 96       	adiw	r28, 0x01	; 1
 396:	c5 31       	cpi	r28, 0x15	; 21
 398:	d1 05       	cpc	r29, r1
 39a:	09 f0       	breq	.+2      	; 0x39e <main+0x2da>
 39c:	9b cf       	rjmp	.-202    	; 0x2d4 <main+0x210>
		else if((ADC_Conversion(0) > k) & (ADC_Conversion(5)  < k))
		{
			//straight
			PORTC=0x00;

			PORTC=0x0F;
 39e:	6f e0       	ldi	r22, 0x0F	; 15
 3a0:	76 2e       	mov	r7, r22
			break;
			
			case 10:		//cleft
			case 11:
			case 111:
			PORTB=0x08;
 3a2:	08 e0       	ldi	r16, 0x08	; 8
			
			
			//straight
			case 1001:
			case 1111:
			PORTB=0x0A;
 3a4:	5a e0       	ldi	r21, 0x0A	; 10
 3a6:	65 2e       	mov	r6, r21
			case 0:
			
			PORTB=0x02;
			break;
			case 1101:
			PORTB=0x06;
 3a8:	46 e0       	ldi	r20, 0x06	; 6
 3aa:	54 2e       	mov	r5, r20
	}

	while(1)
	{
	
		if(ADC_Conversion(1) > k)
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	20 91 60 00 	lds	r18, 0x0060
 3b8:	30 91 61 00 	lds	r19, 0x0061
 3bc:	28 17       	cp	r18, r24
 3be:	39 07       	cpc	r19, r25
 3c0:	20 f4       	brcc	.+8      	; 0x3ca <main+0x306>
 3c2:	31 e0       	ldi	r19, 0x01	; 1
 3c4:	83 2e       	mov	r8, r19
 3c6:	91 2c       	mov	r9, r1
 3c8:	0d c0       	rjmp	.+26     	; 0x3e4 <main+0x320>
		{
			m1=1;
		}
		else if(ADC_Conversion(1) < k)
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	20 91 60 00 	lds	r18, 0x0060
 3d6:	30 91 61 00 	lds	r19, 0x0061
 3da:	82 17       	cp	r24, r18
 3dc:	93 07       	cpc	r25, r19
 3de:	10 f4       	brcc	.+4      	; 0x3e4 <main+0x320>
 3e0:	88 24       	eor	r8, r8
 3e2:	99 24       	eor	r9, r9
		{
			m1=0;
		}
		
		if(ADC_Conversion(2) > k)
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	20 91 60 00 	lds	r18, 0x0060
 3f0:	30 91 61 00 	lds	r19, 0x0061
 3f4:	28 17       	cp	r18, r24
 3f6:	39 07       	cpc	r19, r25
 3f8:	20 f4       	brcc	.+8      	; 0x402 <main+0x33e>
 3fa:	2a e0       	ldi	r18, 0x0A	; 10
 3fc:	a2 2e       	mov	r10, r18
 3fe:	b1 2c       	mov	r11, r1
 400:	0d c0       	rjmp	.+26     	; 0x41c <main+0x358>
		{
			m2=10;
		}
		else if(ADC_Conversion(2) < k)
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	20 91 60 00 	lds	r18, 0x0060
 40e:	30 91 61 00 	lds	r19, 0x0061
 412:	82 17       	cp	r24, r18
 414:	93 07       	cpc	r25, r19
 416:	10 f4       	brcc	.+4      	; 0x41c <main+0x358>
 418:	aa 24       	eor	r10, r10
 41a:	bb 24       	eor	r11, r11
		{
			m2=0;
		}
		
		if(ADC_Conversion(3) > k)
 41c:	83 e0       	ldi	r24, 0x03	; 3
 41e:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	20 91 60 00 	lds	r18, 0x0060
 428:	30 91 61 00 	lds	r19, 0x0061
 42c:	28 17       	cp	r18, r24
 42e:	39 07       	cpc	r19, r25
 430:	20 f4       	brcc	.+8      	; 0x43a <main+0x376>
 432:	94 e6       	ldi	r25, 0x64	; 100
 434:	c9 2e       	mov	r12, r25
 436:	d1 2c       	mov	r13, r1
 438:	0d c0       	rjmp	.+26     	; 0x454 <main+0x390>
		{
			m3=100;
		}
		else if(ADC_Conversion(3) < k)
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	20 91 60 00 	lds	r18, 0x0060
 446:	30 91 61 00 	lds	r19, 0x0061
 44a:	82 17       	cp	r24, r18
 44c:	93 07       	cpc	r25, r19
 44e:	10 f4       	brcc	.+4      	; 0x454 <main+0x390>
 450:	cc 24       	eor	r12, r12
 452:	dd 24       	eor	r13, r13
		{
			m3=0;
		}
		
		if(ADC_Conversion(4) > k)
 454:	84 e0       	ldi	r24, 0x04	; 4
 456:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	20 91 60 00 	lds	r18, 0x0060
 460:	30 91 61 00 	lds	r19, 0x0061
 464:	28 17       	cp	r18, r24
 466:	39 07       	cpc	r19, r25
 468:	28 f4       	brcc	.+10     	; 0x474 <main+0x3b0>
 46a:	88 ee       	ldi	r24, 0xE8	; 232
 46c:	e8 2e       	mov	r14, r24
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	f8 2e       	mov	r15, r24
 472:	0d c0       	rjmp	.+26     	; 0x48e <main+0x3ca>
		{
			m4=1000;
		}
		else if(ADC_Conversion(4) < k)
 474:	84 e0       	ldi	r24, 0x04	; 4
 476:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	20 91 60 00 	lds	r18, 0x0060
 480:	30 91 61 00 	lds	r19, 0x0061
 484:	82 17       	cp	r24, r18
 486:	93 07       	cpc	r25, r19
 488:	10 f4       	brcc	.+4      	; 0x48e <main+0x3ca>
 48a:	ee 24       	eor	r14, r14
 48c:	ff 24       	eor	r15, r15
		{
			m4=0;
		}
		
		if(ADC_Conversion(0) > k)
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	20 91 60 00 	lds	r18, 0x0060
 49a:	30 91 61 00 	lds	r19, 0x0061
 49e:	28 17       	cp	r18, r24
 4a0:	39 07       	cpc	r19, r25
 4a2:	18 f0       	brcs	.+6      	; 0x4aa <main+0x3e6>
		{
			ma=1;
		}
		else if(ADC_Conversion(0) < k)
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
		{
			ma=0;
		}
		
		if(ADC_Conversion(5) > k)
 4aa:	85 e0       	ldi	r24, 0x05	; 5
 4ac:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	20 91 60 00 	lds	r18, 0x0060
 4b6:	30 91 61 00 	lds	r19, 0x0061
 4ba:	28 17       	cp	r18, r24
 4bc:	39 07       	cpc	r19, r25
 4be:	18 f0       	brcs	.+6      	; 0x4c6 <main+0x402>
		{
			mb=10;
		}
		else if(ADC_Conversion(5) < k)
 4c0:	85 e0       	ldi	r24, 0x05	; 5
 4c2:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
		{
			mb=0;
		}
		
		
		x=(m1+m2+m3+m4);
 4c6:	e5 01       	movw	r28, r10
 4c8:	c8 0d       	add	r28, r8
 4ca:	d9 1d       	adc	r29, r9
 4cc:	cc 0d       	add	r28, r12
 4ce:	dd 1d       	adc	r29, r13
 4d0:	ce 0d       	add	r28, r14
 4d2:	df 1d       	adc	r29, r15
		
		if((ADC_Conversion(0) > k) & (ADC_Conversion(5)  > k))
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 4da:	10 e0       	ldi	r17, 0x00	; 0
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	20 91 60 00 	lds	r18, 0x0060
 4e2:	30 91 61 00 	lds	r19, 0x0061
 4e6:	28 17       	cp	r18, r24
 4e8:	39 07       	cpc	r19, r25
 4ea:	08 f4       	brcc	.+2      	; 0x4ee <main+0x42a>
 4ec:	11 e0       	ldi	r17, 0x01	; 1
 4ee:	85 e0       	ldi	r24, 0x05	; 5
 4f0:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 4f4:	11 23       	and	r17, r17
 4f6:	09 f4       	brne	.+2      	; 0x4fa <main+0x436>
 4f8:	4d c0       	rjmp	.+154    	; 0x594 <main+0x4d0>
 4fa:	28 2f       	mov	r18, r24
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	80 91 60 00 	lds	r24, 0x0060
 502:	90 91 61 00 	lds	r25, 0x0061
 506:	82 17       	cp	r24, r18
 508:	93 07       	cpc	r25, r19
 50a:	08 f0       	brcs	.+2      	; 0x50e <main+0x44a>
 50c:	43 c0       	rjmp	.+134    	; 0x594 <main+0x4d0>
		{
		  PORTC=0x00;
 50e:	15 ba       	out	0x15, r1	; 21
		  switch(x)
 510:	cf 36       	cpi	r28, 0x6F	; 111
 512:	d1 05       	cpc	r29, r1
 514:	09 f4       	brne	.+2      	; 0x518 <main+0x454>
 516:	a3 c0       	rjmp	.+326    	; 0x65e <main+0x59a>
 518:	c0 37       	cpi	r28, 0x70	; 112
 51a:	d1 05       	cpc	r29, r1
 51c:	c0 f4       	brcc	.+48     	; 0x54e <main+0x48a>
 51e:	cc 30       	cpi	r28, 0x0C	; 12
 520:	d1 05       	cpc	r29, r1
 522:	40 f4       	brcc	.+16     	; 0x534 <main+0x470>
 524:	ca 30       	cpi	r28, 0x0A	; 10
 526:	d1 05       	cpc	r29, r1
 528:	08 f0       	brcs	.+2      	; 0x52c <main+0x468>
 52a:	99 c0       	rjmp	.+306    	; 0x65e <main+0x59a>
 52c:	22 97       	sbiw	r28, 0x02	; 2
 52e:	08 f0       	brcs	.+2      	; 0x532 <main+0x46e>
 530:	3d cf       	rjmp	.-390    	; 0x3ac <main+0x2e8>
 532:	95 c0       	rjmp	.+298    	; 0x65e <main+0x59a>
 534:	c0 34       	cpi	r28, 0x40	; 64
 536:	d1 05       	cpc	r29, r1
 538:	08 f4       	brcc	.+2      	; 0x53c <main+0x478>
 53a:	38 cf       	rjmp	.-400    	; 0x3ac <main+0x2e8>
 53c:	c2 34       	cpi	r28, 0x42	; 66
 53e:	d1 05       	cpc	r29, r1
 540:	08 f4       	brcc	.+2      	; 0x544 <main+0x480>
 542:	92 c0       	rjmp	.+292    	; 0x668 <main+0x5a4>
 544:	ce 36       	cpi	r28, 0x6E	; 110
 546:	d1 05       	cpc	r29, r1
 548:	09 f0       	breq	.+2      	; 0x54c <main+0x488>
 54a:	30 cf       	rjmp	.-416    	; 0x3ac <main+0x2e8>
 54c:	88 c0       	rjmp	.+272    	; 0x65e <main+0x59a>
 54e:	f3 e0       	ldi	r31, 0x03	; 3
 550:	c4 3f       	cpi	r28, 0xF4	; 244
 552:	df 07       	cpc	r29, r31
 554:	58 f4       	brcc	.+22     	; 0x56c <main+0x4a8>
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	c2 3f       	cpi	r28, 0xF2	; 242
 55a:	d8 07       	cpc	r29, r24
 55c:	08 f0       	brcs	.+2      	; 0x560 <main+0x49c>
 55e:	7f c0       	rjmp	.+254    	; 0x65e <main+0x59a>
 560:	e3 e0       	ldi	r30, 0x03	; 3
 562:	c8 3e       	cpi	r28, 0xE8	; 232
 564:	de 07       	cpc	r29, r30
 566:	09 f0       	breq	.+2      	; 0x56a <main+0x4a6>
 568:	5f c0       	rjmp	.+190    	; 0x628 <main+0x564>
 56a:	7e c0       	rjmp	.+252    	; 0x668 <main+0x5a4>
 56c:	84 e0       	ldi	r24, 0x04	; 4
 56e:	cd 34       	cpi	r28, 0x4D	; 77
 570:	d8 07       	cpc	r29, r24
 572:	09 f4       	brne	.+2      	; 0x576 <main+0x4b2>
 574:	79 c0       	rjmp	.+242    	; 0x668 <main+0x5a4>
 576:	e4 e0       	ldi	r30, 0x04	; 4
 578:	ce 34       	cpi	r28, 0x4E	; 78
 57a:	de 07       	cpc	r29, r30
 57c:	28 f4       	brcc	.+10     	; 0x588 <main+0x4c4>
 57e:	cc 54       	subi	r28, 0x4C	; 76
 580:	d4 40       	sbci	r29, 0x04	; 4
 582:	09 f0       	breq	.+2      	; 0x586 <main+0x4c2>
 584:	13 cf       	rjmp	.-474    	; 0x3ac <main+0x2e8>
 586:	70 c0       	rjmp	.+224    	; 0x668 <main+0x5a4>
 588:	84 e0       	ldi	r24, 0x04	; 4
 58a:	c6 35       	cpi	r28, 0x56	; 86
 58c:	d8 07       	cpc	r29, r24
 58e:	09 f0       	breq	.+2      	; 0x592 <main+0x4ce>
 590:	61 c0       	rjmp	.+194    	; 0x654 <main+0x590>
 592:	6a c0       	rjmp	.+212    	; 0x668 <main+0x5a4>
			PORTB=0x0A;
			break;
			
		  }
		}
		else if((ADC_Conversion(0) < k) & (ADC_Conversion(5)  < k))
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 59a:	10 e0       	ldi	r17, 0x00	; 0
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	20 91 60 00 	lds	r18, 0x0060
 5a2:	30 91 61 00 	lds	r19, 0x0061
 5a6:	82 17       	cp	r24, r18
 5a8:	93 07       	cpc	r25, r19
 5aa:	08 f4       	brcc	.+2      	; 0x5ae <main+0x4ea>
 5ac:	11 e0       	ldi	r17, 0x01	; 1
 5ae:	85 e0       	ldi	r24, 0x05	; 5
 5b0:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 5b4:	11 23       	and	r17, r17
 5b6:	09 f4       	brne	.+2      	; 0x5ba <main+0x4f6>
 5b8:	5b c0       	rjmp	.+182    	; 0x670 <main+0x5ac>
 5ba:	28 2f       	mov	r18, r24
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	80 91 60 00 	lds	r24, 0x0060
 5c2:	90 91 61 00 	lds	r25, 0x0061
 5c6:	28 17       	cp	r18, r24
 5c8:	39 07       	cpc	r19, r25
 5ca:	08 f0       	brcs	.+2      	; 0x5ce <main+0x50a>
 5cc:	51 c0       	rjmp	.+162    	; 0x670 <main+0x5ac>
		{
		  PORTC=0x0F;
 5ce:	75 ba       	out	0x15, r7	; 21
		  switch(x)
 5d0:	cf 36       	cpi	r28, 0x6F	; 111
 5d2:	d1 05       	cpc	r29, r1
 5d4:	09 f4       	brne	.+2      	; 0x5d8 <main+0x514>
 5d6:	48 c0       	rjmp	.+144    	; 0x668 <main+0x5a4>
 5d8:	c0 37       	cpi	r28, 0x70	; 112
 5da:	d1 05       	cpc	r29, r1
 5dc:	c8 f4       	brcc	.+50     	; 0x610 <main+0x54c>
 5de:	cc 30       	cpi	r28, 0x0C	; 12
 5e0:	d1 05       	cpc	r29, r1
 5e2:	50 f4       	brcc	.+20     	; 0x5f8 <main+0x534>
 5e4:	ca 30       	cpi	r28, 0x0A	; 10
 5e6:	d1 05       	cpc	r29, r1
 5e8:	08 f0       	brcs	.+2      	; 0x5ec <main+0x528>
 5ea:	3e c0       	rjmp	.+124    	; 0x668 <main+0x5a4>
 5ec:	20 97       	sbiw	r28, 0x00	; 0
 5ee:	b9 f1       	breq	.+110    	; 0x65e <main+0x59a>
 5f0:	21 97       	sbiw	r28, 0x01	; 1
 5f2:	09 f0       	breq	.+2      	; 0x5f6 <main+0x532>
 5f4:	db ce       	rjmp	.-586    	; 0x3ac <main+0x2e8>
 5f6:	38 c0       	rjmp	.+112    	; 0x668 <main+0x5a4>
 5f8:	c0 34       	cpi	r28, 0x40	; 64
 5fa:	d1 05       	cpc	r29, r1
 5fc:	08 f4       	brcc	.+2      	; 0x600 <main+0x53c>
 5fe:	d6 ce       	rjmp	.-596    	; 0x3ac <main+0x2e8>
 600:	c2 34       	cpi	r28, 0x42	; 66
 602:	d1 05       	cpc	r29, r1
 604:	60 f1       	brcs	.+88     	; 0x65e <main+0x59a>
 606:	ce 36       	cpi	r28, 0x6E	; 110
 608:	d1 05       	cpc	r29, r1
 60a:	09 f0       	breq	.+2      	; 0x60e <main+0x54a>
 60c:	cf ce       	rjmp	.-610    	; 0x3ac <main+0x2e8>
 60e:	2c c0       	rjmp	.+88     	; 0x668 <main+0x5a4>
 610:	f3 e0       	ldi	r31, 0x03	; 3
 612:	c4 3f       	cpi	r28, 0xF4	; 244
 614:	df 07       	cpc	r29, r31
 616:	68 f4       	brcc	.+26     	; 0x632 <main+0x56e>
 618:	83 e0       	ldi	r24, 0x03	; 3
 61a:	c2 3f       	cpi	r28, 0xF2	; 242
 61c:	d8 07       	cpc	r29, r24
 61e:	20 f5       	brcc	.+72     	; 0x668 <main+0x5a4>
 620:	e3 e0       	ldi	r30, 0x03	; 3
 622:	c8 3e       	cpi	r28, 0xE8	; 232
 624:	de 07       	cpc	r29, r30
 626:	d9 f0       	breq	.+54     	; 0x65e <main+0x59a>
 628:	c9 5e       	subi	r28, 0xE9	; 233
 62a:	d3 40       	sbci	r29, 0x03	; 3
 62c:	09 f0       	breq	.+2      	; 0x630 <main+0x56c>
 62e:	be ce       	rjmp	.-644    	; 0x3ac <main+0x2e8>
 630:	1d c0       	rjmp	.+58     	; 0x66c <main+0x5a8>
 632:	84 e0       	ldi	r24, 0x04	; 4
 634:	cd 34       	cpi	r28, 0x4D	; 77
 636:	d8 07       	cpc	r29, r24
 638:	a9 f0       	breq	.+42     	; 0x664 <main+0x5a0>
 63a:	e4 e0       	ldi	r30, 0x04	; 4
 63c:	ce 34       	cpi	r28, 0x4E	; 78
 63e:	de 07       	cpc	r29, r30
 640:	28 f4       	brcc	.+10     	; 0x64c <main+0x588>
 642:	cc 54       	subi	r28, 0x4C	; 76
 644:	d4 40       	sbci	r29, 0x04	; 4
 646:	09 f0       	breq	.+2      	; 0x64a <main+0x586>
 648:	b1 ce       	rjmp	.-670    	; 0x3ac <main+0x2e8>
 64a:	09 c0       	rjmp	.+18     	; 0x65e <main+0x59a>
 64c:	84 e0       	ldi	r24, 0x04	; 4
 64e:	c6 35       	cpi	r28, 0x56	; 86
 650:	d8 07       	cpc	r29, r24
 652:	29 f0       	breq	.+10     	; 0x65e <main+0x59a>
 654:	c7 55       	subi	r28, 0x57	; 87
 656:	d4 40       	sbci	r29, 0x04	; 4
 658:	09 f0       	breq	.+2      	; 0x65c <main+0x598>
 65a:	a8 ce       	rjmp	.-688    	; 0x3ac <main+0x2e8>
 65c:	07 c0       	rjmp	.+14     	; 0x66c <main+0x5a8>
			case 1000:		//cright
			case 0101:
			case 0100:
			case 0:
			
			PORTB=0x02;
 65e:	82 e0       	ldi	r24, 0x02	; 2
 660:	88 bb       	out	0x18, r24	; 24
 662:	a4 ce       	rjmp	.-696    	; 0x3ac <main+0x2e8>
			break;
			case 1101:
			PORTB=0x06;
 664:	58 ba       	out	0x18, r5	; 24
 666:	a2 ce       	rjmp	.-700    	; 0x3ac <main+0x2e8>
			break;
			
			case 10:		//cleft
			case 11:
			case 111:
			PORTB=0x08;
 668:	08 bb       	out	0x18, r16	; 24
 66a:	a0 ce       	rjmp	.-704    	; 0x3ac <main+0x2e8>
			
			
			//straight
			case 1001:
			case 1111:
			PORTB=0x0A;
 66c:	68 ba       	out	0x18, r6	; 24
 66e:	9e ce       	rjmp	.-708    	; 0x3ac <main+0x2e8>
			break;
		  }
		}
		else if((ADC_Conversion(0) < k) & (ADC_Conversion(5)  > k))
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 676:	10 e0       	ldi	r17, 0x00	; 0
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	20 91 60 00 	lds	r18, 0x0060
 67e:	30 91 61 00 	lds	r19, 0x0061
 682:	82 17       	cp	r24, r18
 684:	93 07       	cpc	r25, r19
 686:	08 f4       	brcc	.+2      	; 0x68a <main+0x5c6>
 688:	11 e0       	ldi	r17, 0x01	; 1
 68a:	85 e0       	ldi	r24, 0x05	; 5
 68c:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 690:	11 23       	and	r17, r17
 692:	49 f0       	breq	.+18     	; 0x6a6 <main+0x5e2>
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	80 91 60 00 	lds	r24, 0x0060
 69c:	90 91 61 00 	lds	r25, 0x0061
 6a0:	82 17       	cp	r24, r18
 6a2:	93 07       	cpc	r25, r19
 6a4:	e8 f0       	brcs	.+58     	; 0x6e0 <main+0x61c>
			//straight
			PORTC=0x00;
		
			PORTC=0x0F;
		}
		else if((ADC_Conversion(0) > k) & (ADC_Conversion(5)  < k))
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 6ac:	10 e0       	ldi	r17, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	20 91 60 00 	lds	r18, 0x0060
 6b4:	30 91 61 00 	lds	r19, 0x0061
 6b8:	28 17       	cp	r18, r24
 6ba:	39 07       	cpc	r19, r25
 6bc:	08 f4       	brcc	.+2      	; 0x6c0 <main+0x5fc>
 6be:	11 e0       	ldi	r17, 0x01	; 1
 6c0:	85 e0       	ldi	r24, 0x05	; 5
 6c2:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_Conversion>
 6c6:	11 23       	and	r17, r17
 6c8:	09 f4       	brne	.+2      	; 0x6cc <main+0x608>
 6ca:	70 ce       	rjmp	.-800    	; 0x3ac <main+0x2e8>
 6cc:	28 2f       	mov	r18, r24
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	80 91 60 00 	lds	r24, 0x0060
 6d4:	90 91 61 00 	lds	r25, 0x0061
 6d8:	28 17       	cp	r18, r24
 6da:	39 07       	cpc	r19, r25
 6dc:	08 f0       	brcs	.+2      	; 0x6e0 <main+0x61c>
 6de:	66 ce       	rjmp	.-820    	; 0x3ac <main+0x2e8>
		{
			//straight
			PORTC=0x00;
 6e0:	15 ba       	out	0x15, r1	; 21

			PORTC=0x0F;
 6e2:	75 ba       	out	0x15, r7	; 21
 6e4:	63 ce       	rjmp	.-826    	; 0x3ac <main+0x2e8>

000006e6 <__cmpsf2>:
 6e6:	6c d0       	rcall	.+216    	; 0x7c0 <__fp_cmp>
 6e8:	08 f4       	brcc	.+2      	; 0x6ec <__cmpsf2+0x6>
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	08 95       	ret

000006ee <__fixunssfsi>:
 6ee:	94 d0       	rcall	.+296    	; 0x818 <__fp_splitA>
 6f0:	88 f0       	brcs	.+34     	; 0x714 <__fixunssfsi+0x26>
 6f2:	9f 57       	subi	r25, 0x7F	; 127
 6f4:	90 f0       	brcs	.+36     	; 0x71a <__fixunssfsi+0x2c>
 6f6:	b9 2f       	mov	r27, r25
 6f8:	99 27       	eor	r25, r25
 6fa:	b7 51       	subi	r27, 0x17	; 23
 6fc:	a0 f0       	brcs	.+40     	; 0x726 <__fixunssfsi+0x38>
 6fe:	d1 f0       	breq	.+52     	; 0x734 <__fixunssfsi+0x46>
 700:	66 0f       	add	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	88 1f       	adc	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	1a f0       	brmi	.+6      	; 0x710 <__fixunssfsi+0x22>
 70a:	ba 95       	dec	r27
 70c:	c9 f7       	brne	.-14     	; 0x700 <__fixunssfsi+0x12>
 70e:	12 c0       	rjmp	.+36     	; 0x734 <__fixunssfsi+0x46>
 710:	b1 30       	cpi	r27, 0x01	; 1
 712:	81 f0       	breq	.+32     	; 0x734 <__fixunssfsi+0x46>
 714:	9b d0       	rcall	.+310    	; 0x84c <__fp_zero>
 716:	b1 e0       	ldi	r27, 0x01	; 1
 718:	08 95       	ret
 71a:	98 c0       	rjmp	.+304    	; 0x84c <__fp_zero>
 71c:	67 2f       	mov	r22, r23
 71e:	78 2f       	mov	r23, r24
 720:	88 27       	eor	r24, r24
 722:	b8 5f       	subi	r27, 0xF8	; 248
 724:	39 f0       	breq	.+14     	; 0x734 <__fixunssfsi+0x46>
 726:	b9 3f       	cpi	r27, 0xF9	; 249
 728:	cc f3       	brlt	.-14     	; 0x71c <__fixunssfsi+0x2e>
 72a:	86 95       	lsr	r24
 72c:	77 95       	ror	r23
 72e:	67 95       	ror	r22
 730:	b3 95       	inc	r27
 732:	d9 f7       	brne	.-10     	; 0x72a <__fixunssfsi+0x3c>
 734:	3e f4       	brtc	.+14     	; 0x744 <__fixunssfsi+0x56>
 736:	90 95       	com	r25
 738:	80 95       	com	r24
 73a:	70 95       	com	r23
 73c:	61 95       	neg	r22
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	8f 4f       	sbci	r24, 0xFF	; 255
 742:	9f 4f       	sbci	r25, 0xFF	; 255
 744:	08 95       	ret

00000746 <__floatunsisf>:
 746:	e8 94       	clt
 748:	09 c0       	rjmp	.+18     	; 0x75c <__floatsisf+0x12>

0000074a <__floatsisf>:
 74a:	97 fb       	bst	r25, 7
 74c:	3e f4       	brtc	.+14     	; 0x75c <__floatsisf+0x12>
 74e:	90 95       	com	r25
 750:	80 95       	com	r24
 752:	70 95       	com	r23
 754:	61 95       	neg	r22
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	8f 4f       	sbci	r24, 0xFF	; 255
 75a:	9f 4f       	sbci	r25, 0xFF	; 255
 75c:	99 23       	and	r25, r25
 75e:	a9 f0       	breq	.+42     	; 0x78a <__floatsisf+0x40>
 760:	f9 2f       	mov	r31, r25
 762:	96 e9       	ldi	r25, 0x96	; 150
 764:	bb 27       	eor	r27, r27
 766:	93 95       	inc	r25
 768:	f6 95       	lsr	r31
 76a:	87 95       	ror	r24
 76c:	77 95       	ror	r23
 76e:	67 95       	ror	r22
 770:	b7 95       	ror	r27
 772:	f1 11       	cpse	r31, r1
 774:	f8 cf       	rjmp	.-16     	; 0x766 <__floatsisf+0x1c>
 776:	fa f4       	brpl	.+62     	; 0x7b6 <__floatsisf+0x6c>
 778:	bb 0f       	add	r27, r27
 77a:	11 f4       	brne	.+4      	; 0x780 <__floatsisf+0x36>
 77c:	60 ff       	sbrs	r22, 0
 77e:	1b c0       	rjmp	.+54     	; 0x7b6 <__floatsisf+0x6c>
 780:	6f 5f       	subi	r22, 0xFF	; 255
 782:	7f 4f       	sbci	r23, 0xFF	; 255
 784:	8f 4f       	sbci	r24, 0xFF	; 255
 786:	9f 4f       	sbci	r25, 0xFF	; 255
 788:	16 c0       	rjmp	.+44     	; 0x7b6 <__floatsisf+0x6c>
 78a:	88 23       	and	r24, r24
 78c:	11 f0       	breq	.+4      	; 0x792 <__floatsisf+0x48>
 78e:	96 e9       	ldi	r25, 0x96	; 150
 790:	11 c0       	rjmp	.+34     	; 0x7b4 <__floatsisf+0x6a>
 792:	77 23       	and	r23, r23
 794:	21 f0       	breq	.+8      	; 0x79e <__floatsisf+0x54>
 796:	9e e8       	ldi	r25, 0x8E	; 142
 798:	87 2f       	mov	r24, r23
 79a:	76 2f       	mov	r23, r22
 79c:	05 c0       	rjmp	.+10     	; 0x7a8 <__floatsisf+0x5e>
 79e:	66 23       	and	r22, r22
 7a0:	71 f0       	breq	.+28     	; 0x7be <__floatsisf+0x74>
 7a2:	96 e8       	ldi	r25, 0x86	; 134
 7a4:	86 2f       	mov	r24, r22
 7a6:	70 e0       	ldi	r23, 0x00	; 0
 7a8:	60 e0       	ldi	r22, 0x00	; 0
 7aa:	2a f0       	brmi	.+10     	; 0x7b6 <__floatsisf+0x6c>
 7ac:	9a 95       	dec	r25
 7ae:	66 0f       	add	r22, r22
 7b0:	77 1f       	adc	r23, r23
 7b2:	88 1f       	adc	r24, r24
 7b4:	da f7       	brpl	.-10     	; 0x7ac <__floatsisf+0x62>
 7b6:	88 0f       	add	r24, r24
 7b8:	96 95       	lsr	r25
 7ba:	87 95       	ror	r24
 7bc:	97 f9       	bld	r25, 7
 7be:	08 95       	ret

000007c0 <__fp_cmp>:
 7c0:	99 0f       	add	r25, r25
 7c2:	00 08       	sbc	r0, r0
 7c4:	55 0f       	add	r21, r21
 7c6:	aa 0b       	sbc	r26, r26
 7c8:	e0 e8       	ldi	r30, 0x80	; 128
 7ca:	fe ef       	ldi	r31, 0xFE	; 254
 7cc:	16 16       	cp	r1, r22
 7ce:	17 06       	cpc	r1, r23
 7d0:	e8 07       	cpc	r30, r24
 7d2:	f9 07       	cpc	r31, r25
 7d4:	c0 f0       	brcs	.+48     	; 0x806 <__fp_cmp+0x46>
 7d6:	12 16       	cp	r1, r18
 7d8:	13 06       	cpc	r1, r19
 7da:	e4 07       	cpc	r30, r20
 7dc:	f5 07       	cpc	r31, r21
 7de:	98 f0       	brcs	.+38     	; 0x806 <__fp_cmp+0x46>
 7e0:	62 1b       	sub	r22, r18
 7e2:	73 0b       	sbc	r23, r19
 7e4:	84 0b       	sbc	r24, r20
 7e6:	95 0b       	sbc	r25, r21
 7e8:	39 f4       	brne	.+14     	; 0x7f8 <__fp_cmp+0x38>
 7ea:	0a 26       	eor	r0, r26
 7ec:	61 f0       	breq	.+24     	; 0x806 <__fp_cmp+0x46>
 7ee:	23 2b       	or	r18, r19
 7f0:	24 2b       	or	r18, r20
 7f2:	25 2b       	or	r18, r21
 7f4:	21 f4       	brne	.+8      	; 0x7fe <__fp_cmp+0x3e>
 7f6:	08 95       	ret
 7f8:	0a 26       	eor	r0, r26
 7fa:	09 f4       	brne	.+2      	; 0x7fe <__fp_cmp+0x3e>
 7fc:	a1 40       	sbci	r26, 0x01	; 1
 7fe:	a6 95       	lsr	r26
 800:	8f ef       	ldi	r24, 0xFF	; 255
 802:	81 1d       	adc	r24, r1
 804:	81 1d       	adc	r24, r1
 806:	08 95       	ret

00000808 <__fp_split3>:
 808:	57 fd       	sbrc	r21, 7
 80a:	90 58       	subi	r25, 0x80	; 128
 80c:	44 0f       	add	r20, r20
 80e:	55 1f       	adc	r21, r21
 810:	59 f0       	breq	.+22     	; 0x828 <__fp_splitA+0x10>
 812:	5f 3f       	cpi	r21, 0xFF	; 255
 814:	71 f0       	breq	.+28     	; 0x832 <__fp_splitA+0x1a>
 816:	47 95       	ror	r20

00000818 <__fp_splitA>:
 818:	88 0f       	add	r24, r24
 81a:	97 fb       	bst	r25, 7
 81c:	99 1f       	adc	r25, r25
 81e:	61 f0       	breq	.+24     	; 0x838 <__fp_splitA+0x20>
 820:	9f 3f       	cpi	r25, 0xFF	; 255
 822:	79 f0       	breq	.+30     	; 0x842 <__fp_splitA+0x2a>
 824:	87 95       	ror	r24
 826:	08 95       	ret
 828:	12 16       	cp	r1, r18
 82a:	13 06       	cpc	r1, r19
 82c:	14 06       	cpc	r1, r20
 82e:	55 1f       	adc	r21, r21
 830:	f2 cf       	rjmp	.-28     	; 0x816 <__fp_split3+0xe>
 832:	46 95       	lsr	r20
 834:	f1 df       	rcall	.-30     	; 0x818 <__fp_splitA>
 836:	08 c0       	rjmp	.+16     	; 0x848 <__fp_splitA+0x30>
 838:	16 16       	cp	r1, r22
 83a:	17 06       	cpc	r1, r23
 83c:	18 06       	cpc	r1, r24
 83e:	99 1f       	adc	r25, r25
 840:	f1 cf       	rjmp	.-30     	; 0x824 <__fp_splitA+0xc>
 842:	86 95       	lsr	r24
 844:	71 05       	cpc	r23, r1
 846:	61 05       	cpc	r22, r1
 848:	08 94       	sec
 84a:	08 95       	ret

0000084c <__fp_zero>:
 84c:	e8 94       	clt

0000084e <__fp_szero>:
 84e:	bb 27       	eor	r27, r27
 850:	66 27       	eor	r22, r22
 852:	77 27       	eor	r23, r23
 854:	cb 01       	movw	r24, r22
 856:	97 f9       	bld	r25, 7
 858:	08 95       	ret

0000085a <__gesf2>:
 85a:	b2 df       	rcall	.-156    	; 0x7c0 <__fp_cmp>
 85c:	08 f4       	brcc	.+2      	; 0x860 <__stack+0x1>
 85e:	8f ef       	ldi	r24, 0xFF	; 255
 860:	08 95       	ret

00000862 <__mulsf3>:
 862:	0b d0       	rcall	.+22     	; 0x87a <__mulsf3x>
 864:	78 c0       	rjmp	.+240    	; 0x956 <__fp_round>
 866:	69 d0       	rcall	.+210    	; 0x93a <__fp_pscA>
 868:	28 f0       	brcs	.+10     	; 0x874 <__mulsf3+0x12>
 86a:	6e d0       	rcall	.+220    	; 0x948 <__fp_pscB>
 86c:	18 f0       	brcs	.+6      	; 0x874 <__mulsf3+0x12>
 86e:	95 23       	and	r25, r21
 870:	09 f0       	breq	.+2      	; 0x874 <__mulsf3+0x12>
 872:	5a c0       	rjmp	.+180    	; 0x928 <__fp_inf>
 874:	5f c0       	rjmp	.+190    	; 0x934 <__fp_nan>
 876:	11 24       	eor	r1, r1
 878:	ea cf       	rjmp	.-44     	; 0x84e <__fp_szero>

0000087a <__mulsf3x>:
 87a:	c6 df       	rcall	.-116    	; 0x808 <__fp_split3>
 87c:	a0 f3       	brcs	.-24     	; 0x866 <__mulsf3+0x4>

0000087e <__mulsf3_pse>:
 87e:	95 9f       	mul	r25, r21
 880:	d1 f3       	breq	.-12     	; 0x876 <__mulsf3+0x14>
 882:	95 0f       	add	r25, r21
 884:	50 e0       	ldi	r21, 0x00	; 0
 886:	55 1f       	adc	r21, r21
 888:	62 9f       	mul	r22, r18
 88a:	f0 01       	movw	r30, r0
 88c:	72 9f       	mul	r23, r18
 88e:	bb 27       	eor	r27, r27
 890:	f0 0d       	add	r31, r0
 892:	b1 1d       	adc	r27, r1
 894:	63 9f       	mul	r22, r19
 896:	aa 27       	eor	r26, r26
 898:	f0 0d       	add	r31, r0
 89a:	b1 1d       	adc	r27, r1
 89c:	aa 1f       	adc	r26, r26
 89e:	64 9f       	mul	r22, r20
 8a0:	66 27       	eor	r22, r22
 8a2:	b0 0d       	add	r27, r0
 8a4:	a1 1d       	adc	r26, r1
 8a6:	66 1f       	adc	r22, r22
 8a8:	82 9f       	mul	r24, r18
 8aa:	22 27       	eor	r18, r18
 8ac:	b0 0d       	add	r27, r0
 8ae:	a1 1d       	adc	r26, r1
 8b0:	62 1f       	adc	r22, r18
 8b2:	73 9f       	mul	r23, r19
 8b4:	b0 0d       	add	r27, r0
 8b6:	a1 1d       	adc	r26, r1
 8b8:	62 1f       	adc	r22, r18
 8ba:	83 9f       	mul	r24, r19
 8bc:	a0 0d       	add	r26, r0
 8be:	61 1d       	adc	r22, r1
 8c0:	22 1f       	adc	r18, r18
 8c2:	74 9f       	mul	r23, r20
 8c4:	33 27       	eor	r19, r19
 8c6:	a0 0d       	add	r26, r0
 8c8:	61 1d       	adc	r22, r1
 8ca:	23 1f       	adc	r18, r19
 8cc:	84 9f       	mul	r24, r20
 8ce:	60 0d       	add	r22, r0
 8d0:	21 1d       	adc	r18, r1
 8d2:	82 2f       	mov	r24, r18
 8d4:	76 2f       	mov	r23, r22
 8d6:	6a 2f       	mov	r22, r26
 8d8:	11 24       	eor	r1, r1
 8da:	9f 57       	subi	r25, 0x7F	; 127
 8dc:	50 40       	sbci	r21, 0x00	; 0
 8de:	8a f0       	brmi	.+34     	; 0x902 <__mulsf3_pse+0x84>
 8e0:	e1 f0       	breq	.+56     	; 0x91a <__mulsf3_pse+0x9c>
 8e2:	88 23       	and	r24, r24
 8e4:	4a f0       	brmi	.+18     	; 0x8f8 <__mulsf3_pse+0x7a>
 8e6:	ee 0f       	add	r30, r30
 8e8:	ff 1f       	adc	r31, r31
 8ea:	bb 1f       	adc	r27, r27
 8ec:	66 1f       	adc	r22, r22
 8ee:	77 1f       	adc	r23, r23
 8f0:	88 1f       	adc	r24, r24
 8f2:	91 50       	subi	r25, 0x01	; 1
 8f4:	50 40       	sbci	r21, 0x00	; 0
 8f6:	a9 f7       	brne	.-22     	; 0x8e2 <__mulsf3_pse+0x64>
 8f8:	9e 3f       	cpi	r25, 0xFE	; 254
 8fa:	51 05       	cpc	r21, r1
 8fc:	70 f0       	brcs	.+28     	; 0x91a <__mulsf3_pse+0x9c>
 8fe:	14 c0       	rjmp	.+40     	; 0x928 <__fp_inf>
 900:	a6 cf       	rjmp	.-180    	; 0x84e <__fp_szero>
 902:	5f 3f       	cpi	r21, 0xFF	; 255
 904:	ec f3       	brlt	.-6      	; 0x900 <__mulsf3_pse+0x82>
 906:	98 3e       	cpi	r25, 0xE8	; 232
 908:	dc f3       	brlt	.-10     	; 0x900 <__mulsf3_pse+0x82>
 90a:	86 95       	lsr	r24
 90c:	77 95       	ror	r23
 90e:	67 95       	ror	r22
 910:	b7 95       	ror	r27
 912:	f7 95       	ror	r31
 914:	e7 95       	ror	r30
 916:	9f 5f       	subi	r25, 0xFF	; 255
 918:	c1 f7       	brne	.-16     	; 0x90a <__mulsf3_pse+0x8c>
 91a:	fe 2b       	or	r31, r30
 91c:	88 0f       	add	r24, r24
 91e:	91 1d       	adc	r25, r1
 920:	96 95       	lsr	r25
 922:	87 95       	ror	r24
 924:	97 f9       	bld	r25, 7
 926:	08 95       	ret

00000928 <__fp_inf>:
 928:	97 f9       	bld	r25, 7
 92a:	9f 67       	ori	r25, 0x7F	; 127
 92c:	80 e8       	ldi	r24, 0x80	; 128
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	08 95       	ret

00000934 <__fp_nan>:
 934:	9f ef       	ldi	r25, 0xFF	; 255
 936:	80 ec       	ldi	r24, 0xC0	; 192
 938:	08 95       	ret

0000093a <__fp_pscA>:
 93a:	00 24       	eor	r0, r0
 93c:	0a 94       	dec	r0
 93e:	16 16       	cp	r1, r22
 940:	17 06       	cpc	r1, r23
 942:	18 06       	cpc	r1, r24
 944:	09 06       	cpc	r0, r25
 946:	08 95       	ret

00000948 <__fp_pscB>:
 948:	00 24       	eor	r0, r0
 94a:	0a 94       	dec	r0
 94c:	12 16       	cp	r1, r18
 94e:	13 06       	cpc	r1, r19
 950:	14 06       	cpc	r1, r20
 952:	05 06       	cpc	r0, r21
 954:	08 95       	ret

00000956 <__fp_round>:
 956:	09 2e       	mov	r0, r25
 958:	03 94       	inc	r0
 95a:	00 0c       	add	r0, r0
 95c:	11 f4       	brne	.+4      	; 0x962 <__fp_round+0xc>
 95e:	88 23       	and	r24, r24
 960:	52 f0       	brmi	.+20     	; 0x976 <__fp_round+0x20>
 962:	bb 0f       	add	r27, r27
 964:	40 f4       	brcc	.+16     	; 0x976 <__fp_round+0x20>
 966:	bf 2b       	or	r27, r31
 968:	11 f4       	brne	.+4      	; 0x96e <__fp_round+0x18>
 96a:	60 ff       	sbrs	r22, 0
 96c:	04 c0       	rjmp	.+8      	; 0x976 <__fp_round+0x20>
 96e:	6f 5f       	subi	r22, 0xFF	; 255
 970:	7f 4f       	sbci	r23, 0xFF	; 255
 972:	8f 4f       	sbci	r24, 0xFF	; 255
 974:	9f 4f       	sbci	r25, 0xFF	; 255
 976:	08 95       	ret

00000978 <__udivmodhi4>:
 978:	aa 1b       	sub	r26, r26
 97a:	bb 1b       	sub	r27, r27
 97c:	51 e1       	ldi	r21, 0x11	; 17
 97e:	07 c0       	rjmp	.+14     	; 0x98e <__udivmodhi4_ep>

00000980 <__udivmodhi4_loop>:
 980:	aa 1f       	adc	r26, r26
 982:	bb 1f       	adc	r27, r27
 984:	a6 17       	cp	r26, r22
 986:	b7 07       	cpc	r27, r23
 988:	10 f0       	brcs	.+4      	; 0x98e <__udivmodhi4_ep>
 98a:	a6 1b       	sub	r26, r22
 98c:	b7 0b       	sbc	r27, r23

0000098e <__udivmodhi4_ep>:
 98e:	88 1f       	adc	r24, r24
 990:	99 1f       	adc	r25, r25
 992:	5a 95       	dec	r21
 994:	a9 f7       	brne	.-22     	; 0x980 <__udivmodhi4_loop>
 996:	80 95       	com	r24
 998:	90 95       	com	r25
 99a:	bc 01       	movw	r22, r24
 99c:	cd 01       	movw	r24, r26
 99e:	08 95       	ret

000009a0 <_exit>:
 9a0:	f8 94       	cli

000009a2 <__stop_program>:
 9a2:	ff cf       	rjmp	.-2      	; 0x9a2 <__stop_program>
