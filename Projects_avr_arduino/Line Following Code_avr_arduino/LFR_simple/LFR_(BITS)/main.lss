
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000126  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000078  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000165  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000009e  00000000  00000000  00000323  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000174  00000000  00000000  000003c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b5  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000013  00000000  00000000  0000066d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 36       	cpi	r26, 0x64	; 100
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	1c d0       	rcall	.+56     	; 0x7c <main>
  44:	34 c0       	rjmp	.+104    	; 0xae <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <left>:
void straight();
void u_turn();

void left()
{
	PORTB=0x06;
  48:	86 e0       	ldi	r24, 0x06	; 6
  4a:	88 bb       	out	0x18, r24	; 24
}
  4c:	08 95       	ret

0000004e <right>:


void right()
{
	PORTB=0x09;
  4e:	89 e0       	ldi	r24, 0x09	; 9
  50:	88 bb       	out	0x18, r24	; 24
}
  52:	08 95       	ret

00000054 <straight>:


void straight()
{
	PORTB=0x05;
  54:	85 e0       	ldi	r24, 0x05	; 5
  56:	88 bb       	out	0x18, r24	; 24
}
  58:	08 95       	ret

0000005a <u_turn>:

void u_turn()
{
	PORTB=0x06;
  5a:	86 e0       	ldi	r24, 0x06	; 6
  5c:	88 bb       	out	0x18, r24	; 24
}
  5e:	08 95       	ret

00000060 <adc_init>:

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
  60:	86 e8       	ldi	r24, 0x86	; 134
  62:	86 b9       	out	0x06, r24	; 6

 }
  64:	08 95       	ret

00000066 <getdata>:
 unsigned char getdata(unsigned char chno)
  {
    ADMUX=0X60;						//right align the ADC result
  66:	90 e6       	ldi	r25, 0x60	; 96
  68:	97 b9       	out	0x07, r25	; 7
    ADMUX|=chno;					//select the ADC channel
  6a:	97 b1       	in	r25, 0x07	; 7
  6c:	98 2b       	or	r25, r24
  6e:	97 b9       	out	0x07, r25	; 7
    ADCSRA|=0X40;					//start ADC convertion
  70:	36 9a       	sbi	0x06, 6	; 6
     while((ADCSRA&0x40)==0x40);
  72:	36 99       	sbic	0x06, 6	; 6
  74:	fe cf       	rjmp	.-4      	; 0x72 <getdata+0xc>
	return ADC;
  76:	84 b1       	in	r24, 0x04	; 4
  78:	95 b1       	in	r25, 0x05	; 5
  }
  7a:	08 95       	ret

0000007c <main>:
#include "motor.h"
#include "adc.h"

int main(void)
{
    DDRB |= (1 << DDB3);		// PB3 is now an output
  7c:	bb 9a       	sbi	0x17, 3	; 23

    OCR2 = 255;					// set PWM for n % duty cycle
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1 << COM21);		 // set none-inverting mode
  82:	85 b5       	in	r24, 0x25	; 37
  84:	80 62       	ori	r24, 0x20	; 32
  86:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << WGM21) | (1 << WGM20);	// set fast PWM Mode
  88:	85 b5       	in	r24, 0x25	; 37
  8a:	88 64       	ori	r24, 0x48	; 72
  8c:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << CS21);// set prescaler to 8 and starts PWM
  8e:	85 b5       	in	r24, 0x25	; 37
  90:	82 60       	ori	r24, 0x02	; 2
  92:	85 bd       	out	0x25, r24	; 37
	
	unsigned int str[12];
	unsigned int k1,k2,k;
	
   str[1]= getdata(0x00);
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	e7 df       	rcall	.-50     	; 0x66 <getdata>
   str[2]= getdata(0x01);
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	e5 df       	rcall	.-54     	; 0x66 <getdata>
   str[3]= getdata(0x02);
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	e3 df       	rcall	.-58     	; 0x66 <getdata>
   str[4]= getdata(0x03);
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	e1 df       	rcall	.-62     	; 0x66 <getdata>
   str[5]= getdata(0x04);
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	df df       	rcall	.-66     	; 0x66 <getdata>
   str[6]= getdata(0x05);
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	dd df       	rcall	.-70     	; 0x66 <getdata>
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x30>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
