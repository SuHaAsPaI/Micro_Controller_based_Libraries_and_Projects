
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001ba  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000082  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000422  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ae  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000361  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000157  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000018c  00000000  00000000  00000de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  00000f73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea eb       	ldi	r30, 0xBA	; 186
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	6c d0       	rcall	.+216    	; 0x122 <main>
  4a:	b5 c0       	rjmp	.+362    	; 0x1b6 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <uart_init>:
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)


void uart_init()
{
	UCSRA = 0x00; //disable while setting baud rate
  4e:	1b b8       	out	0x0b, r1	; 11
	UCSRA = 0x00;
  50:	1b b8       	out	0x0b, r1	; 11
	UCSRC = 0x06;
  52:	86 e0       	ldi	r24, 0x06	; 6
  54:	80 bd       	out	0x20, r24	; 32
	UBRRL = BAUD_PRESCALE;    // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  56:	8d e4       	ldi	r24, 0x4D	; 77
  58:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
  5a:	10 bc       	out	0x20, r1	; 32
// into the high byte of the UBRR register
	UCSRB = 0x18;
  5c:	88 e1       	ldi	r24, 0x18	; 24
  5e:	8a b9       	out	0x0a, r24	; 10
}
  60:	08 95       	ret

00000062 <receiveByte>:

unsigned char receiveByte( void )
{
	unsigned char data, status;

	while(!(UCSRA & (1<<RXC))); 	// Wait for incomming data
  62:	5f 9b       	sbis	0x0b, 7	; 11
  64:	fe cf       	rjmp	.-4      	; 0x62 <receiveByte>

	status = UCSRA;
  66:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
  68:	8c b1       	in	r24, 0x0c	; 12

	return(data);
}
  6a:	08 95       	ret

0000006c <transmitByte>:


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
  70:	8c b9       	out	0x0c, r24	; 12
}
  72:	08 95       	ret

00000074 <transmitString_F>:
	transmitString ( dataString );
}


void transmitString_F(char* string)
{
  74:	fc 01       	movw	r30, r24
  76:	04 c0       	rjmp	.+8      	; 0x80 <transmitString_F+0xc>
}


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
  78:	5d 9b       	sbis	0x0b, 5	; 11
  7a:	fe cf       	rjmp	.-4      	; 0x78 <transmitString_F+0x4>


void transmitString_F(char* string)
{
	while ( pgm_read_byte(&(*string)) )
		transmitByte( pgm_read_byte(&(*string++)) );
  7c:	31 96       	adiw	r30, 0x01	; 1

void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
  7e:	8c b9       	out	0x0c, r24	; 12
}


void transmitString_F(char* string)
{
	while ( pgm_read_byte(&(*string)) )
  80:	84 91       	lpm	r24, Z+
  82:	88 23       	and	r24, r24
  84:	c9 f7       	brne	.-14     	; 0x78 <transmitString_F+0x4>
		transmitByte( pgm_read_byte(&(*string++)) );
}
  86:	08 95       	ret

00000088 <transmitString>:


void transmitString( unsigned char* string )
{
  88:	fc 01       	movw	r30, r24
  8a:	04 c0       	rjmp	.+8      	; 0x94 <transmitString+0xc>
}


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
  8c:	5d 9b       	sbis	0x0b, 5	; 11
  8e:	fe cf       	rjmp	.-4      	; 0x8c <transmitString+0x4>


void transmitString( unsigned char* string )
{
	while ( *string )
		transmitByte( *string++ );
  90:	31 96       	adiw	r30, 0x01	; 1

void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
  92:	8c b9       	out	0x0c, r24	; 12
}


void transmitString( unsigned char* string )
{
	while ( *string )
  94:	80 81       	ld	r24, Z
  96:	88 23       	and	r24, r24
  98:	c9 f7       	brne	.-14     	; 0x8c <transmitString+0x4>
		transmitByte( *string++ );
}
  9a:	08 95       	ret

0000009c <transmitHex>:
	UDR = data; 			        /* Start transmition */
}


void transmitHex( unsigned char dataType, unsigned long data )
{
  9c:	df 93       	push	r29
  9e:	cf 93       	push	r28
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	2b 97       	sbiw	r28, 0x0b	; 11
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
	unsigned char count, i, temp;
	unsigned char dataString[] = "0x        ";

	if (dataType == CHAR) count = 2;
	if (dataType == INT) count = 4;
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	11 f4       	brne	.+4      	; 0xb8 <transmitHex+0x1c>
  b4:	94 e0       	ldi	r25, 0x04	; 4
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <transmitHex+0x26>
	if (dataType == LONG) count = 8;
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	11 f4       	brne	.+4      	; 0xc0 <transmitHex+0x24>
  bc:	98 e0       	ldi	r25, 0x08	; 8
  be:	01 c0       	rjmp	.+2      	; 0xc2 <transmitHex+0x26>
  c0:	92 e0       	ldi	r25, 0x02	; 2


void transmitHex( unsigned char dataType, unsigned long data )
{
	unsigned char count, i, temp;
	unsigned char dataString[] = "0x        ";
  c2:	de 01       	movw	r26, r28
  c4:	11 96       	adiw	r26, 0x01	; 1
  c6:	e0 e6       	ldi	r30, 0x60	; 96
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	8b e0       	ldi	r24, 0x0B	; 11
  cc:	01 90       	ld	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	e1 f7       	brne	.-8      	; 0xcc <transmitHex+0x30>
  d4:	9e 01       	movw	r18, r28
  d6:	2e 5f       	subi	r18, 0xFE	; 254
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dataType == INT) count = 4;
	if (dataType == LONG) count = 8;

	for(i=count; i>0; i--)
	{
		temp = data % 16;
  da:	84 2f       	mov	r24, r20
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	e9 2f       	mov	r30, r25
  e0:	f0 e0       	ldi	r31, 0x00	; 0
		if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
  e2:	8a 30       	cpi	r24, 0x0A	; 10
  e4:	20 f4       	brcc	.+8      	; 0xee <transmitHex+0x52>
  e6:	e2 0f       	add	r30, r18
  e8:	f3 1f       	adc	r31, r19
  ea:	80 5d       	subi	r24, 0xD0	; 208
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <transmitHex+0x58>
		else dataString [i+1] = (temp - 10) + 0x41;
  ee:	e2 0f       	add	r30, r18
  f0:	f3 1f       	adc	r31, r19
  f2:	89 5c       	subi	r24, 0xC9	; 201
  f4:	80 83       	st	Z, r24

	if (dataType == CHAR) count = 2;
	if (dataType == INT) count = 4;
	if (dataType == LONG) count = 8;

	for(i=count; i>0; i--)
  f6:	91 50       	subi	r25, 0x01	; 1
  f8:	41 f0       	breq	.+16     	; 0x10a <transmitHex+0x6e>
	{
		temp = data % 16;
		if((temp>=0) && (temp<10)) dataString [i+1] = temp + 0x30;
		else dataString [i+1] = (temp - 10) + 0x41;

		data = data/16;
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	76 95       	lsr	r23
  fe:	67 95       	ror	r22
 100:	57 95       	ror	r21
 102:	47 95       	ror	r20
 104:	8a 95       	dec	r24
 106:	d1 f7       	brne	.-12     	; 0xfc <transmitHex+0x60>
 108:	e8 cf       	rjmp	.-48     	; 0xda <transmitHex+0x3e>
	}

	transmitString ( dataString );
 10a:	ce 01       	movw	r24, r28
 10c:	01 96       	adiw	r24, 0x01	; 1
 10e:	bc df       	rcall	.-136    	; 0x88 <transmitString>
}
 110:	2b 96       	adiw	r28, 0x0b	; 11
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <main>:
#include<util/delay.h>
#include"uart.h"
#include"uart.c"
int main(void)
{
	uart_init();
 122:	95 df       	rcall	.-214    	; 0x4e <uart_init>
	DDRC=0x00;
 124:	14 ba       	out	0x14, r1	; 20
	PORTC=0x00;
 126:	15 ba       	out	0x15, r1	; 21

void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 128:	a1 e6       	ldi	r26, 0x61	; 97
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 12a:	20 e3       	ldi	r18, 0x30	; 48
 12c:	35 e7       	ldi	r19, 0x75	; 117
 12e:	f2 e6       	ldi	r31, 0x62	; 98
	
	while(1)
	{
		if((PINC & 0x03)==0x01)
 130:	e3 e6       	ldi	r30, 0x63	; 99
 132:	74 e6       	ldi	r23, 0x64	; 100
 134:	65 e6       	ldi	r22, 0x65	; 101
 136:	57 e6       	ldi	r21, 0x67	; 103
 138:	46 e6       	ldi	r20, 0x66	; 102
 13a:	83 b3       	in	r24, 0x13	; 19
 13c:	83 70       	andi	r24, 0x03	; 3
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	21 f4       	brne	.+8      	; 0x14a <main+0x28>
}


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 142:	5d 9b       	sbis	0x0b, 5	; 11
 144:	fe cf       	rjmp	.-4      	; 0x142 <main+0x20>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 146:	ac b9       	out	0x0c, r26	; 12
 148:	07 c0       	rjmp	.+14     	; 0x158 <main+0x36>
		{
			transmitByte('a');
			_delay_ms(10);
			
		}
		else if((PINC & 0x03)==0x02)
 14a:	83 b3       	in	r24, 0x13	; 19
 14c:	83 70       	andi	r24, 0x03	; 3
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	31 f4       	brne	.+12     	; 0x15e <main+0x3c>
}


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 152:	5d 9b       	sbis	0x0b, 5	; 11
 154:	fe cf       	rjmp	.-4      	; 0x152 <main+0x30>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 156:	fc b9       	out	0x0c, r31	; 12
 158:	c9 01       	movw	r24, r18
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0x38>
		
		
		
		
		
		if((PINC & 0x0C)==0x04)
 15e:	83 b3       	in	r24, 0x13	; 19
 160:	8c 70       	andi	r24, 0x0C	; 12
 162:	84 30       	cpi	r24, 0x04	; 4
 164:	21 f4       	brne	.+8      	; 0x16e <main+0x4c>
}


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 166:	5d 9b       	sbis	0x0b, 5	; 11
 168:	fe cf       	rjmp	.-4      	; 0x166 <main+0x44>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 16a:	ec b9       	out	0x0c, r30	; 12
 16c:	0e c0       	rjmp	.+28     	; 0x18a <main+0x68>
		{
			transmitByte('c');
			_delay_ms(10);
			
		}
		else if((PINC & 0x0C)==0x08)
 16e:	83 b3       	in	r24, 0x13	; 19
 170:	8c 70       	andi	r24, 0x0C	; 12
 172:	88 30       	cpi	r24, 0x08	; 8
 174:	21 f4       	brne	.+8      	; 0x17e <main+0x5c>
}


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 176:	5d 9b       	sbis	0x0b, 5	; 11
 178:	fe cf       	rjmp	.-4      	; 0x176 <main+0x54>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 17a:	7c b9       	out	0x0c, r23	; 12
 17c:	06 c0       	rjmp	.+12     	; 0x18a <main+0x68>
		{
			transmitByte('d');
			_delay_ms(10);
			
		}
		else if((PINC & 0x0C)==0x00)
 17e:	83 b3       	in	r24, 0x13	; 19
 180:	8c 70       	andi	r24, 0x0C	; 12
 182:	31 f4       	brne	.+12     	; 0x190 <main+0x6e>
}


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 184:	5d 9b       	sbis	0x0b, 5	; 11
 186:	fe cf       	rjmp	.-4      	; 0x184 <main+0x62>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 188:	6c b9       	out	0x0c, r22	; 12
 18a:	c9 01       	movw	r24, r18
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x6a>
			_delay_ms(10);
			
		}
		
		
		if((PINC & 0x30)==0x20)
 190:	83 b3       	in	r24, 0x13	; 19
 192:	80 73       	andi	r24, 0x30	; 48
 194:	80 32       	cpi	r24, 0x20	; 32
 196:	21 f4       	brne	.+8      	; 0x1a0 <main+0x7e>
}


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 198:	5d 9b       	sbis	0x0b, 5	; 11
 19a:	fe cf       	rjmp	.-4      	; 0x198 <main+0x76>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 19c:	5c b9       	out	0x0c, r21	; 12
 19e:	07 c0       	rjmp	.+14     	; 0x1ae <main+0x8c>
		{
			transmitByte('g');
			_delay_ms(10);
			
		}
		else if((PINC & 0x30)==0x10)
 1a0:	83 b3       	in	r24, 0x13	; 19
 1a2:	80 73       	andi	r24, 0x30	; 48
 1a4:	80 31       	cpi	r24, 0x10	; 16
 1a6:	49 f6       	brne	.-110    	; 0x13a <main+0x18>
}


void transmitByte( unsigned char data )
{
	while ( !(UCSRA & (1<<UDRE)) )
 1a8:	5d 9b       	sbis	0x0b, 5	; 11
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <main+0x86>
		; 			                /* Wait for empty transmit buffer */
	UDR = data; 			        /* Start transmition */
 1ac:	4c b9       	out	0x0c, r20	; 12
 1ae:	c9 01       	movw	r24, r18
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x8e>
 1b4:	c2 cf       	rjmp	.-124    	; 0x13a <main+0x18>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
