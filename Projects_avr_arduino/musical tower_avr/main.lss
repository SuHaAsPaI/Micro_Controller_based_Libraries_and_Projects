
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  0000020c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004d  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001d9  00000000  00000000  00000279  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000012e  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f3  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000874  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000cb  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000043  00000000  00000000  0000097f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  74:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <adc_init>:

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
  7c:	86 e8       	ldi	r24, 0x86	; 134
  7e:	86 b9       	out	0x06, r24	; 6
  		
 }
  80:	08 95       	ret

00000082 <getdata>:
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
  82:	90 e6       	ldi	r25, 0x60	; 96
  84:	97 b9       	out	0x07, r25	; 7
    ADMUX|=chno;					//select the ADC channel
  86:	97 b1       	in	r25, 0x07	; 7
  88:	98 2b       	or	r25, r24
  8a:	97 b9       	out	0x07, r25	; 7
    ADCSRA|=0X40;					//start ADC convertion
  8c:	36 9a       	sbi	0x06, 6	; 6
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8e:	80 ea       	ldi	r24, 0xA0	; 160
  90:	9f e0       	ldi	r25, 0x0F	; 15
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <getdata+0x10>
    _delay_ms(1);					//give some time delay to complit the aDC convertion
	return ADCH;
  96:	85 b1       	in	r24, 0x05	; 5
  }
  98:	08 95       	ret

0000009a <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "adc.h"

int main(void)
{
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16
  a4:	1f 93       	push	r17

unsigned int adcdata,adcdata1;

 void adc_init()
 {
  ADCSRA=0X86;						//ADC enable, ADC interrupt enable, set prescaller to 64
  a6:	86 e8       	ldi	r24, 0x86	; 134
  a8:	86 b9       	out	0x06, r24	; 6
	adc_init();
	
	DDRD=0XFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	81 bb       	out	0x11, r24	; 17
	DDRB=0X0F;
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	87 bb       	out	0x17, r24	; 23
  		
 }
 unsigned char getdata(unsigned char chno)	
  {
    ADMUX=0X60;						//right align the ADC result
  b2:	30 e6       	ldi	r19, 0x60	; 96
  b4:	c3 2e       	mov	r12, r19
  b6:	60 ea       	ldi	r22, 0xA0	; 160
  b8:	7f e0       	ldi	r23, 0x0F	; 15
		i=getdata(0x00);
	 
		
		if(i>=0 && i<=16)	//1
		{
			PORTD=0XFE;
  ba:	2e ef       	ldi	r18, 0xFE	; 254
  bc:	d2 2e       	mov	r13, r18
			PORTB=0x0F;
  be:	4f e0       	ldi	r20, 0x0F	; 15
		}
		else if(i>=161 && i<=176)	//11
		{
	
			PORTD=0X00;
			PORTB=0x08;
  c0:	98 e0       	ldi	r25, 0x08	; 8
  c2:	e9 2e       	mov	r14, r25
			PORTB=0x0E;
		}
		else if(i>=145 && i<=160)	//10
		{
			PORTD=0X00;
			PORTB=0x0C;
  c4:	8c e0       	ldi	r24, 0x0C	; 12
  c6:	f8 2e       	mov	r15, r24
			PORTB=0x0F;
		}
		else if(i>=129 && i<=144)	//9
		{
			PORTD=0X00;
			PORTB=0x0E;
  c8:	0e e0       	ldi	r16, 0x0E	; 14
			PORTD=0XC0;
			PORTB=0x0F;
		}
		else if(i>=97 && i<=112)	//7
		{
			PORTD=0X80;
  ca:	10 e8       	ldi	r17, 0x80	; 128
			PORTD=0XE0;
			PORTB=0x0F;
		}
		else if(i>=81 && i<=96)	//6
		{
			PORTD=0XC0;
  cc:	b0 ec       	ldi	r27, 0xC0	; 192
			PORTD=0XF0;
			PORTB=0x0F;
		}
		else if(i>=65 && i<=80)	//5
		{
			PORTD=0XE0;
  ce:	a0 ee       	ldi	r26, 0xE0	; 224
			PORTD=0XF8;
			PORTB=0x0F;
		}
		else if(i>=49 && i<=64)	//4
		{
			PORTD=0XF0;
  d0:	f0 ef       	ldi	r31, 0xF0	; 240
			PORTD=0XFC;
			PORTB=0x0F;
		}
		else if(i>=33 && i<=48)	//3
		{
			PORTD=0XF8;
  d2:	e8 ef       	ldi	r30, 0xF8	; 248
			PORTD=0XFE;
			PORTB=0x0F;
		}
		else if(i>=17 && i<=32)	//2
		{
			PORTD=0XFC;
  d4:	5c ef       	ldi	r21, 0xFC	; 252
  d6:	c7 b8       	out	0x07, r12	; 7
    ADMUX|=chno;					//select the ADC channel
  d8:	87 b1       	in	r24, 0x07	; 7
  da:	87 b9       	out	0x07, r24	; 7
    ADCSRA|=0X40;					//start ADC convertion
  dc:	36 9a       	sbi	0x06, 6	; 6
  de:	cb 01       	movw	r24, r22
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x46>
    _delay_ms(1);					//give some time delay to complit the aDC convertion
	return ADCH;
  e4:	85 b1       	in	r24, 0x05	; 5
	while(1)
	{
		i=getdata(0x00);
	 
		
		if(i>=0 && i<=16)	//1
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	21 31       	cpi	r18, 0x11	; 17
  ec:	31 05       	cpc	r19, r1
  ee:	10 f4       	brcc	.+4      	; 0xf4 <main+0x5a>
		{
			PORTD=0XFE;
  f0:	d2 ba       	out	0x12, r13	; 18
  f2:	05 c0       	rjmp	.+10     	; 0xfe <main+0x64>
			PORTB=0x0F;
		}
		else if(i>=17 && i<=32)	//2
  f4:	c9 01       	movw	r24, r18
  f6:	41 97       	sbiw	r24, 0x11	; 17
  f8:	40 97       	sbiw	r24, 0x10	; 16
  fa:	18 f4       	brcc	.+6      	; 0x102 <main+0x68>
		{
			PORTD=0XFC;
  fc:	52 bb       	out	0x12, r21	; 18
			PORTB=0x0F;
  fe:	48 bb       	out	0x18, r20	; 24
 100:	ea cf       	rjmp	.-44     	; 0xd6 <main+0x3c>
		}
		else if(i>=33 && i<=48)	//3
 102:	c9 01       	movw	r24, r18
 104:	81 97       	sbiw	r24, 0x21	; 33
 106:	40 97       	sbiw	r24, 0x10	; 16
 108:	10 f4       	brcc	.+4      	; 0x10e <main+0x74>
		{
			PORTD=0XF8;
 10a:	e2 bb       	out	0x12, r30	; 18
 10c:	f8 cf       	rjmp	.-16     	; 0xfe <main+0x64>
			PORTB=0x0F;
		}
		else if(i>=49 && i<=64)	//4
 10e:	c9 01       	movw	r24, r18
 110:	c1 97       	sbiw	r24, 0x31	; 49
 112:	40 97       	sbiw	r24, 0x10	; 16
 114:	10 f4       	brcc	.+4      	; 0x11a <main+0x80>
		{
			PORTD=0XF0;
 116:	f2 bb       	out	0x12, r31	; 18
 118:	f2 cf       	rjmp	.-28     	; 0xfe <main+0x64>
			PORTB=0x0F;
		}
		else if(i>=65 && i<=80)	//5
 11a:	c9 01       	movw	r24, r18
 11c:	81 54       	subi	r24, 0x41	; 65
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	40 97       	sbiw	r24, 0x10	; 16
 122:	10 f4       	brcc	.+4      	; 0x128 <main+0x8e>
		{
			PORTD=0XE0;
 124:	a2 bb       	out	0x12, r26	; 18
 126:	eb cf       	rjmp	.-42     	; 0xfe <main+0x64>
			PORTB=0x0F;
		}
		else if(i>=81 && i<=96)	//6
 128:	c9 01       	movw	r24, r18
 12a:	81 55       	subi	r24, 0x51	; 81
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	40 97       	sbiw	r24, 0x10	; 16
 130:	10 f4       	brcc	.+4      	; 0x136 <main+0x9c>
		{
			PORTD=0XC0;
 132:	b2 bb       	out	0x12, r27	; 18
 134:	e4 cf       	rjmp	.-56     	; 0xfe <main+0x64>
			PORTB=0x0F;
		}
		else if(i>=97 && i<=112)	//7
 136:	c9 01       	movw	r24, r18
 138:	81 56       	subi	r24, 0x61	; 97
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	40 97       	sbiw	r24, 0x10	; 16
 13e:	10 f4       	brcc	.+4      	; 0x144 <main+0xaa>
		{
			PORTD=0X80;
 140:	12 bb       	out	0x12, r17	; 18
 142:	dd cf       	rjmp	.-70     	; 0xfe <main+0x64>
			PORTB=0x0F;
		}
		else if(i>=113 && i<=128)	//8
 144:	c9 01       	movw	r24, r18
 146:	81 57       	subi	r24, 0x71	; 113
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	40 97       	sbiw	r24, 0x10	; 16
 14c:	10 f4       	brcc	.+4      	; 0x152 <main+0xb8>
		{
			PORTD=0X00;
 14e:	12 ba       	out	0x12, r1	; 18
 150:	d6 cf       	rjmp	.-84     	; 0xfe <main+0x64>
			PORTB=0x0F;
		}
		else if(i>=129 && i<=144)	//9
 152:	c9 01       	movw	r24, r18
 154:	81 58       	subi	r24, 0x81	; 129
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	40 97       	sbiw	r24, 0x10	; 16
 15a:	18 f4       	brcc	.+6      	; 0x162 <main+0xc8>
		{
			PORTD=0X00;
 15c:	12 ba       	out	0x12, r1	; 18
			PORTB=0x0E;
 15e:	08 bb       	out	0x18, r16	; 24
 160:	ba cf       	rjmp	.-140    	; 0xd6 <main+0x3c>
		}
		else if(i>=145 && i<=160)	//10
 162:	c9 01       	movw	r24, r18
 164:	81 59       	subi	r24, 0x91	; 145
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	40 97       	sbiw	r24, 0x10	; 16
 16a:	18 f4       	brcc	.+6      	; 0x172 <main+0xd8>
		{
			PORTD=0X00;
 16c:	12 ba       	out	0x12, r1	; 18
			PORTB=0x0C;
 16e:	f8 ba       	out	0x18, r15	; 24
 170:	b2 cf       	rjmp	.-156    	; 0xd6 <main+0x3c>
		}
		else if(i>=161 && i<=176)	//11
 172:	c9 01       	movw	r24, r18
 174:	81 5a       	subi	r24, 0xA1	; 161
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	40 97       	sbiw	r24, 0x10	; 16
 17a:	18 f4       	brcc	.+6      	; 0x182 <main+0xe8>
		{
	
			PORTD=0X00;
 17c:	12 ba       	out	0x12, r1	; 18
			PORTB=0x08;
 17e:	e8 ba       	out	0x18, r14	; 24
 180:	aa cf       	rjmp	.-172    	; 0xd6 <main+0x3c>
		}
		else if(i>=177 && i<=255)	//12
 182:	21 5b       	subi	r18, 0xB1	; 177
 184:	30 40       	sbci	r19, 0x00	; 0
 186:	2f 34       	cpi	r18, 0x4F	; 79
 188:	31 05       	cpc	r19, r1
 18a:	08 f0       	brcs	.+2      	; 0x18e <main+0xf4>
 18c:	a4 cf       	rjmp	.-184    	; 0xd6 <main+0x3c>
		{
			PORTD=0X00;
 18e:	12 ba       	out	0x12, r1	; 18
			PORTB=0X00;
 190:	18 ba       	out	0x18, r1	; 24
 192:	a1 cf       	rjmp	.-190    	; 0xd6 <main+0x3c>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
